type Business {
  businessId: ID!
  name: String!
  address: String
  city: String
  state: String
  location: Point
  reviews: [Review] @relation(name: "REVIEWS", direction: IN)
  categories: [Category] @relation(name: "IN_CATEGORY", direction: OUT)
  avgStars: Float @cypher(statement: """
    MATCH (this)<-[:REVIEWS]-(r:Review)
    RETURN coalesce(avg(r.stars),0.0)
  """)
}

type Category {
  name: ID!
  businesses: [Business] @relation(name: "IN_CATEGORY", direction: IN)
}

type Mutation {
  mergeBusinessCategory(categories: [String!]!, businessId: ID!): Business @cypher(statement: """
    MATCH (b:Business {businessId: $businessId})
    UNWIND $categories AS cat
    MERGE (c:Category {name: cat})
    MERGE (b)-[:IN_CATEGORY]->(c)
    RETURN b
  """)
}

type Query {
  ratingsCount: [RatingCount] @cypher(statement: """
    MATCH (r:Review)
    WITH r.stars AS stars, COUNT(*) AS count
    ORDER BY stars
    RETURN {
      stars: stars, 
      count: count
    }
  """)
  userCount: Int! @cypher(statement: """MATCH (u:User) RETURN COUNT(u)""")
}

type RatingCount {
  stars: Float!
  count: Int!
}

type Review {
  reviewId: ID!
  stars: Float
  text: String
  date: Date
  business: Business @relation(name: "REVIEWS", direction: OUT)
  user: User @relation(name: "WROTE", direction: IN)
}

type User {
  avgStars: Float @cypher(statement: """MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.stars))""")
  name: String
  numReviews: Int @cypher(statement: """MATCH (this)-[:WROTE]->(r:Review) RETURN COUNT(r)""")
  recommendations(first: Int = 3): [Business] @cypher(statement: """
    MATCH (this)-[:WROTE]->(r:Review)-[:REVIEWS]->(:Business)<-[:REVIEWS]-(:Review)<-[:WROTE]-(:User)-[:WROTE]->(:Review)-[:REVIEWS]->(rec:Business)
    WHERE NOT EXISTS( (this)-[:WROTE]->(:Review)-[:REVIEWS]->(rec) )
    WITH rec, COUNT(*) AS num 
    ORDER BY num DESC 
    LIMIT $first 
    RETURN rec
  """)
  reviews: [Review] @relation(name: "WROTE", direction: OUT)
  userId: ID!
}
